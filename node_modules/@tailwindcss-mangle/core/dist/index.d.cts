import * as _tailwindcss_mangle_config from '@tailwindcss-mangle/config';
import { MangleUserConfig } from '@tailwindcss-mangle/config';
import { ClassGenerator } from '@tailwindcss-mangle/shared';
export { ClassGenerator } from '@tailwindcss-mangle/shared';
import postcss from 'postcss';
import { StringLiteral, TemplateElement } from '@babel/types';
import { BabelFileResult } from '@babel/core';
import MagicString from 'magic-string';

interface InitConfigOptions {
    cwd?: string;
    classList?: string[];
    mangleOptions?: MangleUserConfig;
}
declare class Context {
    options: MangleUserConfig;
    private includeMatcher;
    private excludeMatcher;
    private replaceMap;
    classSet: Set<string>;
    classGenerator: ClassGenerator;
    preserveFunctionSet: Set<string>;
    preserveClassNamesSet: Set<string>;
    preserveFunctionRegexs: RegExp[];
    constructor();
    isPreserveClass(className: string): boolean;
    addPreserveClass(className: string): Set<string>;
    isPreserveFunction(calleeName: string): boolean;
    private mergeOptions;
    isInclude(file: string): boolean;
    currentMangleClassFilter(className: string): boolean;
    getClassSet(): Set<string>;
    getReplaceMap(): Map<string, string>;
    addToUsedBy(key: string, file: string): void;
    loadClassSet(classList: string[]): void;
    initConfig(opts?: InitConfigOptions): Promise<_tailwindcss_mangle_config.UserConfig | null>;
}

interface IClassGeneratorContextItem {
    name: string;
    usedBy: string[];
}
interface IClassGeneratorOptions {
    reserveClassName?: (string | RegExp)[];
    customGenerate?: (original: string, opts: IClassGeneratorOptions, context: Record<string, any>) => string | undefined;
    log?: boolean;
    exclude?: (string | RegExp)[];
    include?: (string | RegExp)[];
    ignoreClass?: (string | RegExp)[];
    classPrefix?: string;
}
interface IHandlerOptions {
    replaceMap: Map<string, string>;
    ctx: Context;
}
interface IHtmlHandlerOptions extends IHandlerOptions {
}
interface IJsHandlerOptions extends IHandlerOptions {
    splitQuote?: boolean;
    minified?: boolean;
}
interface ICssHandlerOptions extends IHandlerOptions {
    ignoreVueScoped?: boolean;
    file?: string;
}

declare function cssHandler(rawSource: string, options: ICssHandlerOptions): postcss.LazyResult<postcss.Root>;

declare function htmlHandler(rawSource: string, options: IHtmlHandlerOptions): string;

interface IPreProcessJsOptions {
    code: string | MagicString;
    replaceMap: Map<string, string>;
    id: string;
    ctx: Context;
}
declare function preProcessJs(options: IPreProcessJsOptions): string;
interface IPreProcessRawCodeOptions {
    code: string | MagicString;
    replaceMap: Map<string, string>;
    id: string;
    ctx: Context;
}
declare function preProcessRawCode(options: IPreProcessRawCodeOptions): string;

declare function handleValue(raw: string, node: StringLiteral | TemplateElement, options: IJsHandlerOptions): string;
declare function jsHandler(rawSource: string, options: IJsHandlerOptions): BabelFileResult;

export { Context, type IClassGeneratorContextItem, type IClassGeneratorOptions, type ICssHandlerOptions, type IHandlerOptions, type IHtmlHandlerOptions, type IJsHandlerOptions, cssHandler, handleValue, htmlHandler, jsHandler, preProcessJs, preProcessRawCode };
